var driver_t = "##HEADER##\n/*\n\tDefault template driver for JS/CC generated parsers running as\n\tbrowser-based JavaScript/ECMAScript applications.\n\t\n\tWARNING: \tThis parser template will not run as console and has lesser\n\t\t\t\tfeatures for debugging than the console derivates for the\n\t\t\t\tvarious JavaScript platforms.\n\t\n\tFeatures:\n\t- Parser trace messages\n\t- Integrated error recovery\n\t- Line and column counter variables\n\t\n\tWritten 2007, 2008 by Jan Max Meyer, J.M.K S.F. Software Technologies\n\t\n\tThis is in the public domain.\n*/\n##HEADER##\n\nvar ##PREFIX##_dbg_withtrace\t\t= false;\nvar ##PREFIX##_dbg_string\t\t\t= new String();\n\nfunction __##PREFIX##dbg_print( text )\n{\n\t##PREFIX##_dbg_string += text + \"\\n\";\n}\n\nfunction __##PREFIX##lex( PCB )\n{\n\tvar state;\n\tvar match\t\t= -1;\n\tvar match_pos\t= 0;\n\tvar start\t\t= 0;\n\tvar pos;\n\tvar chr;\n\n\twhile( 1 )\n\t{\n\t\tstate = 0;\n\t\tmatch = -1;\n\t\tmatch_pos = 0;\n\t\tstart = 0;\n\t\tpos = PCB.offset + 1 + ( match_pos - start );\n\n\t\tdo\n\t\t{\n\t\t\tpos--;\n\t\t\tstate = 0;\n\t\t\tmatch = -2;\n\t\t\tstart = pos;\n\t\n\t\t\tif( PCB.src.length <= start )\n\t\t\t\treturn ##EOF##;\n\t\n\t\t\tdo\n\t\t\t{\n\t\t\t\tchr = PCB.src.charCodeAt( pos );\n\n##DFA##\n\n\t\t\t\t//Line- and column-counter\n\t\t\t\tif( state > -1 )\n\t\t\t\t{\n\t\t\t\t\tif( chr == 10 )\n\t\t\t\t\t{\n\t\t\t\t\t\tPCB.line++;\n\t\t\t\t\t\tPCB.column = 0;\n\t\t\t\t\t}\n\t\t\t\t\tPCB.column++;\n\t\t\t\t}\n\n\t\t\t\tpos++;\n\t\n\t\t\t}\n\t\t\twhile( state > -1 );\n\t\n\t\t}\n\t\twhile( ##WHITESPACE## > -1 && match == ##WHITESPACE## );\n\t\n\t\tif( match > -1 )\n\t\t{\n\t\t\tPCB.att = PCB.src.substr( start, match_pos - start );\n\t\t\tPCB.offset = match_pos;\n\t\t\t\n##TERMINAL_ACTIONS##\n\t\t}\n\t\telse\n\t\t{\n\t\t\tPCB.att = new String();\n\t\t\tmatch = -1;\n\t\t}\n\t\t\n\t\tbreak;\n\t}\n\n\treturn match;\n}\n\nfunction __##PREFIX##parse( src, err_off, err_la )\n{\n\tvar\t\tsstack\t\t\t= new Array();\n\tvar\t\tvstack\t\t\t= new Array();\n\tvar \terr_cnt\t\t\t= 0;\n\tvar\t\trval;\n\tvar\t\tact;\n\t\n\t//PCB: Parser Control Block\n\tvar \tparsercontrol\t= new Function( \"\",\n\t\t\t\t\t\t\t\t\"var la;\" +\n\t\t\t\t\t\t\t\t\"var act;\" +\n\t\t\t\t\t\t\t\t\"var offset;\" +\n\t\t\t\t\t\t\t\t\"var src;\" +\n\t\t\t\t\t\t\t\t\"var att;\" +\n\t\t\t\t\t\t\t\t\"var line;\" +\n\t\t\t\t\t\t\t\t\"var column;\" +\n\t\t\t\t\t\t\t\t\"var error_step;\" );\n\tvar\t\tPCB\t= new parsercontrol();\n\t\n\t//Visual parse tree generation\n\tvar \ttreenode\t\t= new Function( \"\",\n\t\t\t\t\t\t\t\t\"var sym;\"+\n\t\t\t\t\t\t\t\t\"var att;\"+\n\t\t\t\t\t\t\t\t\"var child;\" );\n\tvar\t\ttreenodes\t\t= new Array();\n\tvar\t\ttree\t\t\t= new Array();\n\tvar\t\ttmptree\t\t\t= null;\n\n##TABLES##\n\n##LABELS##\n\t\n\tPCB.line = 1;\n\tPCB.column = 1;\n\tPCB.offset = 0;\n\tPCB.error_step = 0;\n\tPCB.src = src;\n\tPCB.att = new String();\n\n\tif( !err_off )\n\t\terr_off\t= new Array();\n\tif( !err_la )\n\t\terr_la = new Array();\n\t\n\tsstack.push( 0 );\n\tvstack.push( 0 );\n\t\n\tPCB.la = __##PREFIX##lex( PCB );\n\t\t\t\n\twhile( true )\n\t{\n\t\tPCB.act = ##ERROR##;\n\t\tfor( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )\n\t\t{\n\t\t\tif( act_tab[sstack[sstack.length-1]][i] == PCB.la )\n\t\t\t{\n\t\t\t\tPCB.act = act_tab[sstack[sstack.length-1]][i+1];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t_print( \"state \" + sstack[sstack.length-1] +\n\t\t\t\t\" la = \" +\n\t\t\t\tPCB.la + \" att = >\" +\n\t\t\t\tPCB.att + \"< act = \" +\n\t\t\t\tPCB.act + \" src = >\" +\n\t\t\t\tPCB.src.substr( PCB.offset, 30 ) + \"...\" + \"<\" +\n\t\t\t\t\" sstack = \" + sstack.join() );\n\t\t*/\n\t\t\n\t\tif( ##PREFIX##_dbg_withtrace && sstack.length > 0 )\n\t\t{\n\t\t\t__##PREFIX##dbg_print( \"\\nState \" + sstack[sstack.length-1] + \"\\n\" +\n\t\t\t\t\t\t\t\"\\tLookahead: \" + labels[PCB.la] +\n\t\t\t\t\t\t\t\t\" (\\\"\" + PCB.att + \"\\\")\\n\" +\n\t\t\t\t\t\t\t\"\\tAction: \" + PCB.act + \"\\n\" + \n\t\t\t\t\t\t\t\"\\tSource: \\\"\" + PCB.src.substr( PCB.offset, 30 ) +\n\t\t\t\t\t\t\t\t\t( ( PCB.offset + 30 < PCB.src.length ) ?\n\t\t\t\t\t\t\t\t\t\t\"...\" : \"\" ) + \"\\\"\\n\" +\n\t\t\t\t\t\t\t\"\\tStack: \" + sstack.join() + \"\\n\" +\n\t\t\t\t\t\t\t\"\\tValue stack: \" + vstack.join() + \"\\n\" );\n\t\t\t\n\t\t\tif( ##PREFIX##_dbg_withstepbystep )\n\t\t\t\t__##PREFIX##dbg_wait();\n\t\t}\n\t\t\n\t\t\t\n\t\t//Parse error? Try to recover!\n\t\tif( PCB.act == ##ERROR## )\n\t\t{\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"Error detected: There is no reduce or shift on the symbol \" + labels[PCB.la] );\n\t\t\t\n\t\t\t//Report errors only when error_step is 0, and this is not a\n\t\t\t//subsequent error from a previous parse\n\t\t\tif( PCB.error_step == 0 )\n\t\t\t{\n\t\t\t\terr_cnt++;\n\t\t\t\terr_off.push( PCB.offset - PCB.att.length );\n\t\t\t\terr_la.push( new Array() );\n\t\t\t\tfor( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )\n\t\t\t\t\terr_la[err_la.length-1].push( labels[act_tab[sstack[sstack.length-1]][i]] );\n\t\t\t}\n\t\t\t\n\t\t\t//Perform error recovery\t\t\t\n\t\t\twhile( sstack.length > 1 && PCB.act == ##ERROR## )\n\t\t\t{\n\t\t\t\tsstack.pop();\n\t\t\t\tvstack.pop();\n\t\t\t\t\n\t\t\t\t//Try to shift on error token\n\t\t\t\tfor( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )\n\t\t\t\t{\n\t\t\t\t\tif( act_tab[sstack[sstack.length-1]][i] == ##ERROR_TOKEN## )\n\t\t\t\t\t{\n\t\t\t\t\t\tPCB.act = act_tab[sstack[sstack.length-1]][i+1];\n\t\t\t\t\t\t\n\t\t\t\t\t\tsstack.push( PCB.act );\n\t\t\t\t\t\tvstack.push( new String() );\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//Is it better to leave the parser now?\n\t\t\tif( sstack.length > 1 && PCB.act != ##ERROR## )\n\t\t\t{\n\t\t\t\t//Ok, now try to shift on the next tokens\n\t\t\t\twhile( PCB.la != ##EOF## )\n\t\t\t\t{\n\t\t\t\t\tPCB.act = ##ERROR##;\n\t\t\t\t\t\n\t\t\t\t\tfor( var i = 0; i < act_tab[sstack[sstack.length-1]].length; i+=2 )\n\t\t\t\t\t{\n\t\t\t\t\t\tif( act_tab[sstack[sstack.length-1]][i] == PCB.la )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPCB.act = act_tab[sstack[sstack.length-1]][i+1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif( PCB.act != ##ERROR## )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\twhile( ( PCB.la = __##PREFIX##lex( PCB ) )\n\t\t\t\t\t\t\t\t< 0 )\n\t\t\t\t\t\tPCB.offset++;\n\t\t\t\t}\n\t\t\t\twhile( PCB.la != ##EOF## && PCB.act == ##ERROR## );\n\t\t\t}\n\t\t\t\n\t\t\tif( PCB.act == ##ERROR## || PCB.la == ##EOF## )\n\t\t\t{\n\t\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t\t__##PREFIX##dbg_print( \"\\tError recovery failed, terminating parse process...\" );\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"\\tError recovery succeeded, continuing\" );\n\t\t\t\n\t\t\t//Try to parse the next three tokens successfully...\n\t\t\tPCB.error_step = 3;\n\t\t}\n\n\t\t//Shift\n\t\tif( PCB.act > 0 )\n\t\t{\n\t\t\t\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"Shifting symbol: \" + labels[PCB.la] + \" (\" + PCB.att + \")\" );\n\t\t\n\t\t\tsstack.push( PCB.act );\n\t\t\tvstack.push( PCB.att );\n\t\t\t\n\t\t\tPCB.la = __##PREFIX##lex( PCB );\n\t\t\t\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"\\tNew lookahead symbol: \" + labels[PCB.la] + \" (\" + PCB.att + \")\" );\n\t\t\t\t\n\t\t\t//Successfull shift and right beyond error recovery?\n\t\t\tif( PCB.error_step > 0 )\n\t\t\t\tPCB.error_step--;\n\t\t}\n\t\t//Reduce\n\t\telse\n\t\t{\t\t\n\t\t\tact = PCB.act * -1;\n\t\t\t\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"Reducing by production: \" + act );\n\t\t\t\n\t\t\trval = void( 0 );\n\t\t\t\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"\\tPerforming semantic action...\" );\n\t\t\t\n##ACTIONS##\n\t\t\t\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"\\tPopping \" + pop_tab[act][1] + \" off the stack...\" );\n\t\t\t\t\n\t\t\tfor( var i = 0; i < pop_tab[act][1]; i++ )\n\t\t\t{\n\t\t\t\tsstack.pop();\n\t\t\t\tvstack.pop();\n\t\t\t}\n\n\t\t\t//Get goto-table entry\n\t\t\tPCB.act = ##ERROR##;\n\t\t\tfor( var i = 0; i < goto_tab[sstack[sstack.length-1]].length; i+=2 )\n\t\t\t{\n\t\t\t\tif( goto_tab[sstack[sstack.length-1]][i] == pop_tab[act][0] )\n\t\t\t\t{\n\t\t\t\t\tPCB.act = goto_tab[sstack[sstack.length-1]][i+1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Goal symbol match?\n\t\t\tif( act == 0 ) //Don't use PCB.act here!\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tif( ##PREFIX##_dbg_withtrace )\n\t\t\t\t__##PREFIX##dbg_print( \"\\tPushing non-terminal \" + labels[ pop_tab[PCB.act][0] ] );\n\t\t\t\n\t\t\t//...and push it!\n\t\t\tsstack.push( PCB.act );\n\t\t\tvstack.push( rval );\t\t\t\n\t\t}\n\t}\n\n\tif( ##PREFIX##_dbg_withtrace )\n\t\t__##PREFIX##dbg_print( \"\\nParse complete.\" );\n\t\n\treturn err_cnt;\n}\n\n\n##FOOTER##";
