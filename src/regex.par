/~ -PARSER----------------------------------------------------------------------
JS/CC LALR(1) Parser Generator
Copyright (C) 2007-2012 by Phorward Software Technologies, Jan Max Meyer
http://jscc.phorward-software.com ++ contact<<AT>>phorward-software<<DOT>>com

File:	regex.par
Author:	Jan Max Meyer
Usage:	A parser for regular expressions, with NFA construction using the
		Thompson algorithm. This JS/CC parser module for regular expressions
		has been implemented using a very early version of JS/CC itself,
		which generated a pseudo-lexer using the JavaScript build-in RegExp-
		object.

You may use, modify and distribute this software under the terms and conditions
of the BSD license. Please see LICENSE for more information.
----------------------------------------------------------------------------- ~/

[*
(function(root, factory) {
	if (typeof define === 'function' && define.amd) {
		define(['./global', './log/log', './classes/Param', './classes/Nfa', './enums/EDGE'], factory);
	} else if (typeof module === 'object' && module.exports) {
		module.exports = factory(require('./global'), require('./log/log'), require('./classes/Param'), require('./classes/Nfa'), require('./enums/EDGE'));
	} else {
		root.regex = factory(root.global, root.log, root.Param, root.Nfa, root.EDGE);
	}
}(this, function(/** jscc.global */ global, /** jscc.log */ log, /** function(new:jscc.classes.Param, number=, number=) */ Param, /** function(new:jscc.classes.Nfa, ?NfaOptions=) */ Nfa, EDGE) {
var first_nfa;
var last_nfa;
*]


	'\|'
	'\*'
	'\+'
	'\?'
	'\('
	'\)'
	'\['
	'\]'
	'\.'		ANY_CHAR
	'\\[0-9]+'	ASCII_CODE
	'\\.'		ESCAPED_CHAR
	'.'			ANY
	;


##


RegEx:			Expression						[*	%% = new Param();
													global.NFA_states.value[ first_nfa ].follow = %1.start;
													last_nfa = %1.end;
												*]
				;

Expression:		Expression '|' Catenation		[*
													%% = new Param(global.NFA_states.create(), global.NFA_states.create());
													global.NFA_states.value[%%.start].follow = %1.start;
													global.NFA_states.value[%%.start].follow2 = %3.start;

													global.NFA_states.value[%1.end].follow = %%.end;
													global.NFA_states.value[%3.end].follow = %%.end;
												*]
				| Catenation
				;

Catenation:		Catenation Factor				[*
													var weight=global.NFA_states.value[%1.end].weight;///SV: if weight unused - delete this
													global.NFA_states.value[%1.end]=new Nfa(global.NFA_states.value[%2.start]);
													global.NFA_states.value[%1.end].weight=weight;///SV: if weight unused - delete this
													global.NFA_states.value[%2.start].edge = EDGE.FREE;

													%1.end = %2.end;

													%% = %1;
												*]
				| Factor
				;

Factor:			Term '*'						[*
													%% = new Param(global.NFA_states.create(), global.NFA_states.create());
													global.NFA_states.value[%%.start].follow = %1.start;
													global.NFA_states.value[%1.end].follow = %%.end;

													global.NFA_states.value[%%.start].follow2 = %%.end;
													global.NFA_states.value[%1.end].follow2 = %1.start;
												*]
				| Term '+'						[*
													%% = new Param(global.NFA_states.create(), global.NFA_states.create());
													global.NFA_states.value[%%.start].follow = %1.start;
													global.NFA_states.value[%1.end].follow = %%.end;

													global.NFA_states.value[%1.end].follow2 = %1.start;
												*]
				| Term '?'						[*
													%% = new Param(global.NFA_states.create(), global.NFA_states.create());
													global.NFA_states.value[%%.start].follow = %1.start;
													global.NFA_states.value[%%.start].follow2 = %%.end;
													global.NFA_states.value[%1.end].follow = %%.end;
												*]
				| Term
				;

Term:			Character						[*	%% = new Param();
													%%.start = global.NFA_states.create();
													%%.end = global.NFA_states.value[%%.start].follow
														= global.NFA_states.create();
													global.NFA_states.value[%%.start].edge = EDGE.CHAR;

													global.NFA_states.value[%%.start].ccl.set(%1.charCodeAt( 0 ), true );
												*]
				| CharacterSet
				| '(' Expression ')'			[*	%% = %2; *]
				;

CharacterSet:	'[' CharClass ']'				[*	var negate = false;
													var i = 0, j, start;
													%% = new Param();
													%%.start = global.NFA_states.create();
													%%.end = global.NFA_states.value[%%.start].follow
														= global.NFA_states.create();
													global.NFA_states.value[%%.start].edge = EDGE.CHAR;

													if( %2.charAt( i ) == '^' ){
														negate = true;
														for( j = global.MIN_CHAR; j < global.MAX_CHAR; j++ )
															global.NFA_states.value[%%.start].ccl.set(j,true);
														i++;
													}
													for( ; i < %2.length; i++ ){
														if( %2.charAt( i+1 ) == '-'	&& i+2 < %2.length ){
															i++;
															for( j = %2.charCodeAt( i-1 );
																	j < %2.charCodeAt( i+1 );
																		j++ )
																global.NFA_states.value[%%.start].ccl.set(j, !negate);
														}
														else
															global.NFA_states.value[%%.start].ccl.set(%2.charCodeAt(i), !negate);
													}
												*]
				| ANY_CHAR						[*	%% = new Param();

													%%.start = global.NFA_states.create();
													%%.end = global.NFA_states.value[%%.start].follow
														= global.NFA_states.create();
													global.NFA_states.value[%%.start].edge = EDGE.CHAR;
													for( var i = global.MIN_CHAR; i < global.MAX_CHAR; i++ )
														global.NFA_states.value[%%.start].ccl.set(i, true);
												*]
				;

CharClass:		CharClass Character				[*	%% = %1 + %2; *]
				|								[*	%% = ""; *]
				;


Character:		ASCII_CODE						[*	%% = String.fromCharCode( %1.substr( 1 ) ); *]
				| ESCAPED_CHAR					[*	%% = {n:'\n',r:'\r',t:'\t',a:'\a'}[%1.substr(1)]||%1.substr(1); *]
				| ANY							[*	%% = %1; *]
				;

[*
/**
 * Compiles the given regex into a nondeterministic finite automata.
 * @param {string} str - The regex to compile.
 * @param {number} accept - The id of the symbol accepted.
 * @param {boolean} case_insensitive - Whether the regex is case insensitive.
 * @param {number} cur_line - The current line number being parsed.  Used in error
 * logging.
 * @module {jscc.regex} jscc/regex
 * @requires module:jscc/global
 * @requires module:jscc/log/log
 */
function compile_regex( str, accept, case_insensitive, cur_line ){
	var i, j;
	var weight = 0;
	var true_edges = 0;
	var error_offsets = [];
	var error_expects = [];
	var error_count = 0;

	if( str == "" )
		return;

	cur_line = cur_line || 0;

	//_print( "str = >" + str + "< " + case_insensitive );

	first_nfa = global.NFA_states.create();
	if( ( error_count = __parse( str, error_offsets, error_expects ) ) == 0 ){
		//If the symbol should be case-insensitive, manipulate the
		//character sets on the newly created items.
		if( case_insensitive ){
			for( i = 0; i < global.NFA_states.value.length; i++ ){
				if( global.NFA_states.value[i].edge == EDGE.CHAR ){
					for( j = global.MIN_CHAR; j < global.MAX_CHAR; j++ ){
						if( global.NFA_states.value[i].ccl.get( j ) ){
							global.NFA_states.value[i].ccl.set(String.fromCharCode( j ).toUpperCase().charCodeAt( 0 ), true );
							global.NFA_states.value[i].ccl.set(String.fromCharCode( j ).toLowerCase().charCodeAt( 0 ), true );
						}
					}
				}
			}
		}

		/*
			2008-5-9	Radim Cebis:

			I think that computing weight of the NFA_states.value is weird,
			IMHO nfa_state which accepts a symbol, should have
			weight according to the order...
		*/
		global.NFA_states.value[ last_nfa ].accept = accept;
		global.NFA_states.value[ last_nfa ].weight = global.regex_weight++;

		if( first_nfa > 0 ){
			i = 0;
			while( global.NFA_states.value[i].follow2 != -1 )
				i = global.NFA_states.value[i].follow2;

			global.NFA_states.value[i].follow2 = first_nfa;
		}
	}else{
		for( i = 0; i < error_count; i++ ){
			var spaces = '';
			for( j = 0; j < error_offsets[i]; j++ )
				spaces += " ";

			log.error( "Regular expression:\n\t" + str + "\n\t" +
			 		spaces + "^ expecting " + error_expects[i].join() + " on line " + cur_line );
		}
	}
}
return compile_regex;


//TESTING AREA ;)
//compile_regex( "[A-Z][A-Z0-9]*", 0 );
//compile_regex( "ab|c", 1 );
//compile_regex( "[0-9]+", 1 );
//print_nfa();
//var d = create_subset( NFA_states.value );
//print_dfa( d );
//d = minimize_dfa( d );
//print_dfa( d );
}));
*]

