{{#> layout title="The Terminal Declaration Part"}}
<h1>The Terminal Declaration Part</h1>
<p>Tokens, or terminal symbols, are defined in the first part of each grammar definition file. These terminals are
    defined using a regular expression meta-language, but it's also possible to give each terminal symbol an individual
    name and an individual code segment to be executed when this token is recognized by the generated lexical analyzer
    (e.g., to cut the leading and trailing quotation marks if a string is recognized from the token's attribute).</p>
<p>The general syntax to define tokens is:</p>
<pre>
    regular-expression   label          code
           &centerdot;
           &centerdot;
           &centerdot;
    ;
</pre>
<p>where <i>label</i> and <i>code</i> are optional.</p>
<p>The regular expression is specified in the ways described in
    <a href="{{resolve "documentation/grammar/regex.html"}}">Regular Expressions</a>, using a single- or double-quoted
    string.</p>
<p>A token's label is defined as a single-word identifier, e.g. <code>FLOAT</code> or <code>INTEGER_NUMBER</code>. Not
    allowed are separated words. If no label is specified, JS/CC uses the regular-expression definition itself as the
    label, but without taking escape-characters, so the regular expression <code>'\+'</code> will result in the label
    <code>'+'</code>, as in the above example. If <code>'+'</code> itself is specified as a regular expression, a parse
    error will occur because the plus-character is the symbol for a positive closure in regular expressions.</p>
<p>A semantic code action is defined by enclosing the desired JavaScript code segment with a <code>[*</code> and
    <code>*]</code> symbol. If more than one code segment is specified in a row, all segments are summarized to one
    segment to be attached to the terminal symbol. To simply access things like the matched pattern, the offset where
    the pattern starts, or the source string in these individual code segments, the wild cards <code>%match</code>,
    <code>%offset</code>, and <code>%source</code> should be used. These wild cards are later substituted by the
    particular variable names in the resulting lexical analyzer.</p>
<p>Because JS/CC also allows passing precedence and associativity information to tokens or token groups, each block
    of token definitions is closed by a semicolon (<code>;</code>). Because of that, the semicolon is set behind
    the last token definition also in the above example, even if we don't use any precedence information here.</p>
{{/layout}}